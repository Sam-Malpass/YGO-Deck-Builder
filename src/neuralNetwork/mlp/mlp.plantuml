@startuml

title __MLP's Class Diagram__\n

  package neuralNetwork.mlp {
    class Connection {
        - id : String
        - weight : double
        - deltaWeight : double
        - prevDeltaWeight : double
        + Connection()
        + getId()
        + getWeight()
        + getPrevDeltaWeight()
        + getFromNeuron()
        + setWeight()
        + setDeltaWeight()
        + getWeightedInput()
        + hashCode()
        + equals()
    }
  }
  

  package neuralNetwork.mlp {
    class DataReader {
        - numHidden : int
        - sseTracker : double
        - inputWeights : ArrayList<Double>
        - hiddenWeights : ArrayList<Double>
        - outputWeights : ArrayList<Double>
        - inputs : ArrayList<ArrayList<Double>>
        - expectedOutputs : ArrayList<ArrayList<Double>>
        ~ DataReader()
        + getInputs()
        + getOutputs()
        + getNumHidden()
        + getSseTracker()
        + getInputWeights()
        + getHiddenWeights()
        + getOutputWeights()
        + readIn()
        + settingsExist()
        + loadSettings()
    }
  }
  

  package neuralNetwork.mlp {
    class DataWriter {
        ~ DataWriter()
        + writeData()
    }
  }
  

  package neuralNetwork.mlp {
    class NeuralNetwork {
        - inputLayer : List<Processor>
        - hiddenLayer : List<Processor>
        - outputLayer : List<Processor>
        {static} - learningRate : double
        {static} - momentum : double
        {static} - inputs : ArrayList<ArrayList<Double>>
        {static} - expectedOutputs : ArrayList<ArrayList<Double>>
        {static} - resultOutputs : ArrayList<ArrayList<Double>>
        {static} - data : DataReader
        {static} - writer : DataWriter
        {static} - sseTracker : double
        {static} - maxRuns : int
        - prevError : double
        {static} - hiddenNeuronCount : int
        {static} - flagx : boolean
        + NeuralNetwork()
        {static} + prep()
        {static} + run()
        {static} + getHiddenNeuronCount()
        + getOutput()
        + getResultOutputs()
        {static} + setMaxRuns()
        {static} + setLearningRate()
        {static} + setMomentum()
        + setInput()
        + setResultOutputs()
        + outputWeightsConsole()
        + activate()
        - applyBackpropagation()
        - train()
        - printResult()
        - saveSettings()
    }
  }
  

  package neuralNetwork.mlp {
    class Neuron {
        - id : String
        - output : double
        - bias : double
        - inputConnections : List<Connection>
        - connectionLookup : Map<String, Connection>
        + Neuron()
        + Neuron()
        + Neuron()
        + Neuron()
        + getId()
        + getConnection()
        + getInputConnections()
        + getOutput()
        + setOutput()
        + calculateOutput()
        - addInConnections()
        - addBiasConnection()
        + hashCode()
        + equals()
    }
  }
  

  package neuralNetwork.mlp {
    interface Processor {
        {abstract} + getId()
        {abstract} + getOutput()
        {abstract} + setOutput()
        {abstract} + calculateOutput()
        {abstract} + getConnection()
        {abstract} + getInputConnections()
    }
  }
  

  package neuralNetwork.mlp {
    class Randomizer {
        {static} - random : Random
        {static} - randomWeightMultiplier : int
        - Randomizer()
        {static} + generateId()
        {static} + getRandom()
    }
  }
  

  Connection o-- Processor : fromNeuron
  Connection o-- Processor : toNeuron
  NeuralNetwork o-- Processor : bias
  Neuron -up-|> Processor
  Neuron o-- Connection : biasConnection
  Neuron o-- ActivationFunction : activationFunction


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
